DATA IMPUTATION


import pandas as pd
import numpy as np
from sklearn import linear_model
import scipy.stats as stats
from sklearn.metrics import mean_squared_error


df = pd.read_csv("uber.csv")


# Find missing rows
df.isnull().sum()

# Remove null row
df1 = df.dropna()
print(df1)

# Mean/Median/Mode/Arbitary Value/Mode Imputation
df1 = df.fillna(df.mean())
df2 = df.fillna(df.median())
df4 = df.fillna(df.mode().iloc[0])
df3 = df.fillna(27)
print(dfx)

# End Of Tail Imputation
df1 = df[['column1', 'column2', ....]]
for i in df1:
eod = df[i].mean() + 3*df[i].std()
df[i] = df[i].fillna(eod)
print(df1)

# Random Sample Imputation
def random_imputation(df1,column_name):
number_missing = df1.column_name.isnull().sum()
observed_values = df1.loc[df1.column_name.notnull(),column_name]
df1.loc[df1.column_name.isnull(),column_name + '_imp'] = np.random.choice(observed_values,number_missing,replace = True)
return df1

df1 = df[['column1', 'column2', ....]]
for i in df1:
df1[column_name + '_imp'] = df1.column_name
df1 = random_imputation(df1, column_name)
print(df1)

# OR
df1 = df[['column1', 'column2', ....]]
for i in df1:
df1[i].dropna().sample(df1[i].isnull().sum(),random_state=0)
print(df1)

# Linear Regression Imputation
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer, MissingIndicator
X = new_df[['Evaporation', 'Cloud9am', 'Cloud3pm']]
y = new_df['Pressure3pm']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 22)
X_train_original = X_train.copy()
X_test_original = X_test.copy()
for var in ['Evaporation', 'Cloud9am', 'Cloud3pm']:
X_train[var + '_missing'] = np.where(X_train[var].isnull(), 1, 0)
X_test[var + '_missing'] = np.where(X_test[var].isnull(), 1, 0)
X_train


imputer = SimpleImputer(strategy="mean")
X_train_original_transformed = imputer.fit_transform(X_train_original)
X_test_original_transformed = imputer.transform(X_test_original)


from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(X_train_original_transformed, y_train)
y_pred = reg.predict(X_test_original_transformed)
y_pred